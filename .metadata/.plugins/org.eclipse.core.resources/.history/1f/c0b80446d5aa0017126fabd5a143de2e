package com.yyh;
/*
 * Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). 
 * n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). 
 * Find two lines, which together with x-axis forms a container, such that the container contains the most water.
 */
import java.util.Deque;
import java.util.LinkedList;

public class MaxArea {
	public int largest(int[] array) {
		int result = 0;
		Deque<Integer> stack = new LinkedList<>();
		for (int i = 0; i <= array.length; i++){
			int cur = i == array.length ? 0: array[i];
			while (!stack.isEmpty() && array[stack.peekFirst()] >= cur){
				int height = array[stack.pollFirst()];
				int left = stack.isEmpty() ? 0 : stack.peekFirst() + 1;
				result = Math.max(result, height * (i - left));
			}
			stack.offerFirst(i);
		}
		return result;
	}
}
