package com.yyh;
/*
 * Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. 
 * A subtree of s is a tree consists of a node in s and all of this node's descendants. 
 * The tree s could also be considered as a subtree of itself.
 */
class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode(int x) { val = x; }
}

public class Solution {
	public boolean isSubtree(TreeNode s, TreeNode t) {
		if (s == null || t == null){
			return false;
		}
		TreeNode start = find(s, t);
		if (start == null){
			return false;
		}
		return sameTree(start, t);
	}
	
	private TreeNode find(TreeNode s, TreeNode t){
		if (s == null){
			return null;
		}
		TreeNode left = find(s.left, t);
		if (left != null) return left;
		TreeNode right = find(s.right, t);
		if (right != null) return right;
		if (s.val == t.val) return s;
		return null;
	}
	
	private boolean sameTree(TreeNode s, TreeNode t){
		if (s == null && t == null) return true;
		if ((s == null && t != null) || (s != null && t == null) || s.val != t.val){
			return false;
		}
		return sameTree(s.left, t.left) && sameTree(s.right, t.right);
	}
}
